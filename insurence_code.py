# -*- coding: utf-8 -*-
"""Insurence_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TsuhzqoOkJ4uw-CYzthuiWn0PAaqXL6g
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('insurance.csv')
df.head()

df.shape

df.info()

df.isnull().sum()

df["sex"].unique()

df["sex"].value_counts()

df["smoker"].unique()

df["smoker"].value_counts()

df["region"].unique()

df["region"].value_counts()

df["children"].unique()

df["children"].value_counts()

continous_features=['bmi',"charges","age"]
discrete_categorical=["sex","smoker","region"]
discrete_count=["children"]

"""**EDA**"""

#for continous features
df[continous_features].describe()

sns.histplot(df["charges"],kde=True)
plt.show()

sns.histplot(df["age"],kde=True)
plt.show()

sns.histplot(df["bmi"],kde=True)
plt.show()

plt.figure(figsize=(10,5))
plt.subplot(1,3,1)
sns.boxplot(df["age"])
plt.subplot(1,3,2)
sns.boxplot(df["bmi"])
plt.show()
plt.subplot(1,3,3)
sns.boxplot(df["charges"])
plt.show()

plt.figure(figsize=(10,5))
sns.pairplot(df[continous_features])
plt.show()

sns.heatmap(df[continous_features].corr(),annot=True)
plt.show()

plt.figure(figsize=(10,5))
plt.subplot(1,3,1)
sns.countplot(x="smoker",data=df)
plt.subplot(1,3,2)
sns.countplot(x="region",data=df)
plt.subplot(1,3,3)
sns.countplot(x="sex",data=df)
plt.show()

plt.figure(figsize=(10,5))
sns.countplot(x="children",data=df)
plt.show()

plt.pie(df["sex"].value_counts(),labels=df["sex"].value_counts().index,autopct="%.2f%%")
plt.show()

plt.pie(df["smoker"].value_counts(),labels=df["smoker"].value_counts().index,autopct="%.2f%%")
plt.show()

plt.pie(df["region"].value_counts(),labels=df["region"].value_counts().index,autopct="%.2f%%")
plt.show()

df.groupby("sex")["charges"].mean()

df.groupby("smoker")["charges"].mean()

df.groupby("region")["charges"].mean()

"""**Data Preprocessing**

**wrong data**
**wrong data type**
**duplicates**
**missing values**
## **outliers**
"""

df.dtypes

df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.duplicated().sum()

df.isnull().sum()

"""**TRansformation**

**data wrangling**
- encoding
- scaling
"""

df[continous_features].skew()

from scipy.stats import boxcox
df["charges"]=boxcox(df["charges"])[0]

df["bmi"]=boxcox(df["bmi"])[0]

df[continous_features].skew()

df

"""**encoding**"""

df["sex"]=df["sex"].map({"male":0,"female":1})
df["smoker"]=df["smoker"].map({"yes":1,"no":0})
df["region"]=df["region"].map({"southwest":1,"southeast":2,"northwest":3,"northeast":4})

df

df.to_csv("preprocessed_data.csv",index=False)

x=df.drop("charges",axis=1)
y=df["charges"]

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
from sklearn.linear_model import ElasticNet
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error,r2_score

linear_model=LinearRegression()
linear_model.fit(x_train,y_train)
y_pred=linear_model.predict(x_test)
mse=mean_squared_error(y_test,y_pred)
r2=r2_score(y_test,y_pred)
print("MSE:",mse)
print("R2:",r2)

Ridge_model=Ridge()
Ridge_model.fit(x_train,y_train)
y_pred=Ridge_model.predict(x_test)
mse=mean_squared_error(y_test,y_pred)
r2=r2_score(y_test,y_pred)
print("MSE:",mse)
print("R2:",r2)

lass_model=Lasso()
lass_model.fit(x_train,y_train)
y_pred=lass_model.predict(x_test)
mse=mean_squared_error(y_test,y_pred)
r2=r2_score(y_test,y_pred)
print("MSE:",mse)
print("R2:",r2)

elastic_model=ElasticNet()
elastic_model.fit(x_train,y_train)
y_pred=elastic_model.predict(x_test)
mse=mean_squared_error(y_test,y_pred)
r2=r2_score(y_test,y_pred)
print("MSE:",mse)
print("R2:",r2)

knn_model=KNeighborsRegressor()
knn_model.fit(x_train,y_train)
y_pred=knn_model.predict(x_test)
mse=mean_squared_error(y_test,y_pred)
r2=r2_score(y_test,y_pred)
print("MSE:",mse)
print("R2:",r2)

dt_model=DecisionTreeRegressor()
dt_model.fit(x_train,y_train)
y_pred=dt_model.predict(x_test)
mse=mean_squared_error(y_test,y_pred)
rmse=np.sqrt(mse)
r2=r2_score(y_test,y_pred)
print("Mean Squared Error:",mse)
print("Root Mean Squared Error:",rmse)
print("R2 Score:",r2)

rf_model=RandomForestRegressor()
rf_model.fit(x_train,y_train)
y_pred=rf_model.predict(x_test)
mse=mean_squared_error(y_test,y_pred)
rmse=np.sqrt(mse)
r2=r2_score(y_test,y_pred)
print("Mean Squared Error:",mse)
print("Root Mean Squared Error:",rmse)
print("R2 Score:",r2)

svr_model=SVR()
svr_model.fit(x_train,y_train)
y_pred=svr_model.predict(x_test)
mse=mean_squared_error(y_test,y_pred)
rmse=np.sqrt(mse)
r2=r2_score(y_test,y_pred)
print("Mean Squared Error:",mse)
print("Root Mean Squared Error:",rmse)
print("R2 Score:",r2)

import pickle
pickle.dump(rf_model,open("rf_model.pkl","wb"))

